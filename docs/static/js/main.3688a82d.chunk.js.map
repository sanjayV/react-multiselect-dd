{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSelected","selected","console","log","react_default","a","createElement","Fragment","build_default","data","text","value","child","onChange","maxLimitOfSelectedItems","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOA4FeA,qBAtFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAGJI,YAAc,SAACC,GACXC,QAAQC,IAAI,6BAA8BF,IAL3BR,wEAyEf,OACIW,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,KApEO,CACf,CACIC,KAAM,kCACNC,MAAO,GAEX,CACID,KAAM,QACNC,MAAO,EACPC,MAAO,CACH,CACIF,KAAM,UACNC,MAAO,EACPC,MAAO,CACH,CACIF,KAAM,YACNC,MAAO,OAM3B,CACID,KAAM,SACNC,MAAO,EACPC,MAAO,CACH,CACIF,KAAM,WACNC,MAAO,EACPC,MAAO,CACH,CACIF,KAAM,aACNC,MAAO,KAInB,CACID,KAAM,WACNC,MAAO,EACPC,MAAO,CACH,CACIF,KAAM,aACNC,MAAO,GAEX,CACID,KAAM,aACNC,MAAO,OAM3B,CACID,KAAM,WACNC,MAAO,IAEX,CACID,KAAM,WACNC,MAAO,IAEX,CACID,KAAM,WACNC,MAAO,KAQHE,SAAUjB,KAAKI,YACfc,wBAAyB,YAhF3BC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3688a82d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Multiselect from \"react-multiselect-dd\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super();\n    }\n\n    getSelected = (selected) => {\n        console.log(\"your selected value is => \", selected);\n    };\n\n    render() {\n        const sampleData = [\n            {\n                text: \"First-0 First-0 First-0 First-0\",\n                value: 0\n            },\n            {\n                text: \"First\",\n                value: 1,\n                child: [\n                    {\n                        text: \"First.1\",\n                        value: 2,\n                        child: [\n                            {\n                                text: \"First.1.1\",\n                                value: 3\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                text: \"Second\",\n                value: 4,\n                child: [\n                    {\n                        text: \"Second.1\",\n                        value: 5,\n                        child: [\n                            {\n                                text: \"Second.1.1\",\n                                value: 6\n                            }\n                        ]\n                    },\n                    {\n                        text: \"Second.2\",\n                        value: 7,\n                        child: [\n                            {\n                                text: \"Second.2.1\",\n                                value: 8\n                            },\n                            {\n                                text: \"Second.2.2\",\n                                value: 9\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                text: \"First-10\",\n                value: 10\n            },\n            {\n                text: \"First-11\",\n                value: 11\n            },\n            {\n                text: \"First-12\",\n                value: 12\n            }\n        ];\n        return (\n            <React.Fragment>\n                <h1>React Multiselect Dropdown</h1>\n                <Multiselect\n                    data={sampleData}\n                    onChange={this.getSelected}\n                    maxLimitOfSelectedItems={2}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}